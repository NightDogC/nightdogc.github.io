[{"categories":["Unreal"],"content":"工作上出了点问题，本质上是对软件工程和设计模式还不够熟悉。姑且先不论之后进一步系统性的学习，首先还是要解决一下目前工作的问题，因此这个笔记属于一个临阵磨枪的性质，不会有深入的剖析，而是强行为个人接下来的实践服务，故谨慎参考。 在这之前，无论如何首先要把大钊的InsideUE中的Gameplay篇章快速过一遍，后续会再对InsideUE进行精读：大钊 - InsideUE4 另，本篇参考教程如下： [英文直播]和Tom Looman一起开发C++游戏玩法框架(官方字幕) [中文直播]第26期 | 虚幻引擎GamePlay框架理解与应用 | Epic 大钊 马骥 ART0189 - 游戏开发工程 ","date":"2022-11-05","objectID":"/posts/%E4%B8%B4%E9%98%B5%E7%A3%A8%E6%9E%AA%E5%93%AA%E4%BA%9B%E9%80%BB%E8%BE%91%E5%86%99%E5%9C%A8%E5%93%AA%E9%87%8Cunreal-gameplay%E6%A1%86%E6%9E%B6%E7%AE%80%E8%A6%81/:0:0","tags":["临阵磨枪","Gameplay","Unreal","笔记"],"title":"【临阵磨枪】哪些逻辑写在哪里——Unreal Gameplay框架简要","uri":"/posts/%E4%B8%B4%E9%98%B5%E7%A3%A8%E6%9E%AA%E5%93%AA%E4%BA%9B%E9%80%BB%E8%BE%91%E5%86%99%E5%9C%A8%E5%93%AA%E9%87%8Cunreal-gameplay%E6%A1%86%E6%9E%B6%E7%AE%80%E8%A6%81/"},{"categories":["Unreal"],"content":"ActorComponent： 组件是种能力 为Actor提供能力 能力一般跟业务逻辑无关 能力是跨游戏的 一个问题：如果尝试采用组件化开发，在该游戏中有不同的Actor都需要应用同样一份业务逻辑，但是该逻辑不一定能被其他游戏用上，该怎么办呢？ 目前个人的想法是添加接口，即如果一定要用到别的游戏，也不是不可以，去把接口实现了就行。 例： 通用耐久度设计： 新建DurabilityInterface，提供函数： ConsumeDurability(float AlternativeEnemyATK); QueryDurability(); 整合耐久度系统至SuperDurabilityComponent，继承自UActorComponent、IDurabilityInterface 声明变量float Durability、float DurabilityHarmMultiplier 实现QueryDurability() { return Durability; } 创建子类WeaponDurabilityComponent、ArmorDurabilityComponent、PropDurabilityComponent 从PropDurabilityComponent创建子类TimeRelatedPropDurabilityComponent、FrequencyRelatedPropDurabilityComponent 在PropDurabilityComponent以外的各个子类实现ConsumeDurability(float AlternativeEnemyATK) ","date":"2022-11-05","objectID":"/posts/%E4%B8%B4%E9%98%B5%E7%A3%A8%E6%9E%AA%E5%93%AA%E4%BA%9B%E9%80%BB%E8%BE%91%E5%86%99%E5%9C%A8%E5%93%AA%E9%87%8Cunreal-gameplay%E6%A1%86%E6%9E%B6%E7%AE%80%E8%A6%81/:1:0","tags":["临阵磨枪","Gameplay","Unreal","笔记"],"title":"【临阵磨枪】哪些逻辑写在哪里——Unreal Gameplay框架简要","uri":"/posts/%E4%B8%B4%E9%98%B5%E7%A3%A8%E6%9E%AA%E5%93%AA%E4%BA%9B%E9%80%BB%E8%BE%91%E5%86%99%E5%9C%A8%E5%93%AA%E9%87%8Cunreal-gameplay%E6%A1%86%E6%9E%B6%E7%AE%80%E8%A6%81/"},{"categories":["Unreal"],"content":"ALevelScriptActor（关卡蓝图）： 对于项目来说，大部分情况下在关卡蓝图里并不适合写功能，最多适合一些Demo，快速地做一些功能验证 适合一些关卡本身的触发机械互动，且多为表现相关内容，比如到某处触发一段Sequence 一些关卡中机关的触发，虽然看似和关卡本身相关，但机关的触发本身在别的关卡中也需要有，因此触发机关的逻辑还是写在机关Actor本身上为好 Actor本身也是为了实现跨关卡的能力。 按我个人目前的理解，某个关卡中某个区域或整个关卡的的重力等这样的一些关卡配置逻辑或许也可以写进关卡蓝图中，但还是尽量谨慎吧。 ","date":"2022-11-05","objectID":"/posts/%E4%B8%B4%E9%98%B5%E7%A3%A8%E6%9E%AA%E5%93%AA%E4%BA%9B%E9%80%BB%E8%BE%91%E5%86%99%E5%9C%A8%E5%93%AA%E9%87%8Cunreal-gameplay%E6%A1%86%E6%9E%B6%E7%AE%80%E8%A6%81/:2:0","tags":["临阵磨枪","Gameplay","Unreal","笔记"],"title":"【临阵磨枪】哪些逻辑写在哪里——Unreal Gameplay框架简要","uri":"/posts/%E4%B8%B4%E9%98%B5%E7%A3%A8%E6%9E%AA%E5%93%AA%E4%BA%9B%E9%80%BB%E8%BE%91%E5%86%99%E5%9C%A8%E5%93%AA%E9%87%8Cunreal-gameplay%E6%A1%86%E6%9E%B6%E7%AE%80%E8%A6%81/"},{"categories":["Unreal"],"content":"APawn、APlayerController和APlayerState Pawn相比Actor，足够复杂 Pawn、State、Controller一体，集成了MVC Pawn里面也要拒绝写入太过于庞大的逻辑和数据，这是不太好的 一个问题，那是不是意味着Controller里面要写全部的输入逻辑？ 不是的，输入逻辑写在哪里，关键看这个Pawn有没有这个功能，比如攻击、跳跃，这种接受输入的逻辑应当写在Pawn（Character）里，因为这是只有角色才有的功能，而Controller经过Unreal的封装，虽然写在了Pawn里，但由于有Possess这个接口，但实际上还是由Controller告诉Pawn：请攻击、请跳跃的。 而另一方面，一些“不是这个Pawn该有的功能”的输入操作，则应该写在Controller里，比如暂停、调出UI，应当写在Controller里 另一个问题，如果不同的Pawn之间有一些通用的功能，比如Character可以Fire，而炮塔也可以Fire，PlayerController既可以Possess炮塔，也可以Possess Character，那么接受Fire的输入的逻辑应该写在哪里呢？ 在我去翻项目工程之前，我自己的想法是在PlayerController里写Fire输入，Fire本身作为一个FireActorComponent，然后派生出炮塔FireActorComponent和CharacterFireActorComponent，分别实现Fireable接口中Fire()函数，PlayerController里Fire输入事件判断当前Pawn是否实现该接口 工程中则直接采用了接口，取消了一层AcotrComponent的继承关系，直接在炮塔BP和CharacterBP中实现接口。 ","date":"2022-11-05","objectID":"/posts/%E4%B8%B4%E9%98%B5%E7%A3%A8%E6%9E%AA%E5%93%AA%E4%BA%9B%E9%80%BB%E8%BE%91%E5%86%99%E5%9C%A8%E5%93%AA%E9%87%8Cunreal-gameplay%E6%A1%86%E6%9E%B6%E7%AE%80%E8%A6%81/:3:0","tags":["临阵磨枪","Gameplay","Unreal","笔记"],"title":"【临阵磨枪】哪些逻辑写在哪里——Unreal Gameplay框架简要","uri":"/posts/%E4%B8%B4%E9%98%B5%E7%A3%A8%E6%9E%AA%E5%93%AA%E4%BA%9B%E9%80%BB%E8%BE%91%E5%86%99%E5%9C%A8%E5%93%AA%E9%87%8Cunreal-gameplay%E6%A1%86%E6%9E%B6%E7%AE%80%E8%A6%81/"},{"categories":["Unreal"],"content":"AController和APlayerState ","date":"2022-11-05","objectID":"/posts/%E4%B8%B4%E9%98%B5%E7%A3%A8%E6%9E%AA%E5%93%AA%E4%BA%9B%E9%80%BB%E8%BE%91%E5%86%99%E5%9C%A8%E5%93%AA%E9%87%8Cunreal-gameplay%E6%A1%86%E6%9E%B6%E7%AE%80%E8%A6%81/:4:0","tags":["临阵磨枪","Gameplay","Unreal","笔记"],"title":"【临阵磨枪】哪些逻辑写在哪里——Unreal Gameplay框架简要","uri":"/posts/%E4%B8%B4%E9%98%B5%E7%A3%A8%E6%9E%AA%E5%93%AA%E4%BA%9B%E9%80%BB%E8%BE%91%E5%86%99%E5%9C%A8%E5%93%AA%E9%87%8Cunreal-gameplay%E6%A1%86%E6%9E%B6%E7%AE%80%E8%A6%81/"},{"categories":["Unreal"],"content":"AController 用来控制别的Actor的Actor ","date":"2022-11-05","objectID":"/posts/%E4%B8%B4%E9%98%B5%E7%A3%A8%E6%9E%AA%E5%93%AA%E4%BA%9B%E9%80%BB%E8%BE%91%E5%86%99%E5%9C%A8%E5%93%AA%E9%87%8Cunreal-gameplay%E6%A1%86%E6%9E%B6%E7%AE%80%E8%A6%81/:4:1","tags":["临阵磨枪","Gameplay","Unreal","笔记"],"title":"【临阵磨枪】哪些逻辑写在哪里——Unreal Gameplay框架简要","uri":"/posts/%E4%B8%B4%E9%98%B5%E7%A3%A8%E6%9E%AA%E5%93%AA%E4%BA%9B%E9%80%BB%E8%BE%91%E5%86%99%E5%9C%A8%E5%93%AA%E9%87%8Cunreal-gameplay%E6%A1%86%E6%9E%B6%E7%AE%80%E8%A6%81/"},{"categories":["Unreal"],"content":"APlayerState 肉体的状态（抽离开是为了联机复制） ","date":"2022-11-05","objectID":"/posts/%E4%B8%B4%E9%98%B5%E7%A3%A8%E6%9E%AA%E5%93%AA%E4%BA%9B%E9%80%BB%E8%BE%91%E5%86%99%E5%9C%A8%E5%93%AA%E9%87%8Cunreal-gameplay%E6%A1%86%E6%9E%B6%E7%AE%80%E8%A6%81/:4:2","tags":["临阵磨枪","Gameplay","Unreal","笔记"],"title":"【临阵磨枪】哪些逻辑写在哪里——Unreal Gameplay框架简要","uri":"/posts/%E4%B8%B4%E9%98%B5%E7%A3%A8%E6%9E%AA%E5%93%AA%E4%BA%9B%E9%80%BB%E8%BE%91%E5%86%99%E5%9C%A8%E5%93%AA%E9%87%8Cunreal-gameplay%E6%A1%86%E6%9E%B6%E7%AE%80%E8%A6%81/"},{"categories":["Unreal"],"content":"AIController AI是否有PlayerState？有，有一个Property是bWantsPlayerState ","date":"2022-11-05","objectID":"/posts/%E4%B8%B4%E9%98%B5%E7%A3%A8%E6%9E%AA%E5%93%AA%E4%BA%9B%E9%80%BB%E8%BE%91%E5%86%99%E5%9C%A8%E5%93%AA%E9%87%8Cunreal-gameplay%E6%A1%86%E6%9E%B6%E7%AE%80%E8%A6%81/:4:3","tags":["临阵磨枪","Gameplay","Unreal","笔记"],"title":"【临阵磨枪】哪些逻辑写在哪里——Unreal Gameplay框架简要","uri":"/posts/%E4%B8%B4%E9%98%B5%E7%A3%A8%E6%9E%AA%E5%93%AA%E4%BA%9B%E9%80%BB%E8%BE%91%E5%86%99%E5%9C%A8%E5%93%AA%E9%87%8Cunreal-gameplay%E6%A1%86%E6%9E%B6%E7%AE%80%E8%A6%81/"},{"categories":["Unreal"],"content":"ULevel和UWorld ","date":"2022-11-05","objectID":"/posts/%E4%B8%B4%E9%98%B5%E7%A3%A8%E6%9E%AA%E5%93%AA%E4%BA%9B%E9%80%BB%E8%BE%91%E5%86%99%E5%9C%A8%E5%93%AA%E9%87%8Cunreal-gameplay%E6%A1%86%E6%9E%B6%E7%AE%80%E8%A6%81/:5:0","tags":["临阵磨枪","Gameplay","Unreal","笔记"],"title":"【临阵磨枪】哪些逻辑写在哪里——Unreal Gameplay框架简要","uri":"/posts/%E4%B8%B4%E9%98%B5%E7%A3%A8%E6%9E%AA%E5%93%AA%E4%BA%9B%E9%80%BB%E8%BE%91%E5%86%99%E5%9C%A8%E5%93%AA%E9%87%8Cunreal-gameplay%E6%A1%86%E6%9E%B6%E7%AE%80%E8%A6%81/"},{"categories":["Unreal"],"content":"ULevel Actor的集合 World里的板块 对应umap ","date":"2022-11-05","objectID":"/posts/%E4%B8%B4%E9%98%B5%E7%A3%A8%E6%9E%AA%E5%93%AA%E4%BA%9B%E9%80%BB%E8%BE%91%E5%86%99%E5%9C%A8%E5%93%AA%E9%87%8Cunreal-gameplay%E6%A1%86%E6%9E%B6%E7%AE%80%E8%A6%81/:5:1","tags":["临阵磨枪","Gameplay","Unreal","笔记"],"title":"【临阵磨枪】哪些逻辑写在哪里——Unreal Gameplay框架简要","uri":"/posts/%E4%B8%B4%E9%98%B5%E7%A3%A8%E6%9E%AA%E5%93%AA%E4%BA%9B%E9%80%BB%E8%BE%91%E5%86%99%E5%9C%A8%E5%93%AA%E9%87%8Cunreal-gameplay%E6%A1%86%E6%9E%B6%E7%AE%80%E8%A6%81/"},{"categories":["Unreal"],"content":"UWorld Level的集合 运行时，真正的Actor集合 “关卡”的真正单位 场景的真正表示对象 这个层级关系，主要还是涉及到StreamingLevel相关，详见InsideUE即可。 总之这里比较重要的还是强调一下，不要在关卡里写逻辑。 ","date":"2022-11-05","objectID":"/posts/%E4%B8%B4%E9%98%B5%E7%A3%A8%E6%9E%AA%E5%93%AA%E4%BA%9B%E9%80%BB%E8%BE%91%E5%86%99%E5%9C%A8%E5%93%AA%E9%87%8Cunreal-gameplay%E6%A1%86%E6%9E%B6%E7%AE%80%E8%A6%81/:5:2","tags":["临阵磨枪","Gameplay","Unreal","笔记"],"title":"【临阵磨枪】哪些逻辑写在哪里——Unreal Gameplay框架简要","uri":"/posts/%E4%B8%B4%E9%98%B5%E7%A3%A8%E6%9E%AA%E5%93%AA%E4%BA%9B%E9%80%BB%E8%BE%91%E5%86%99%E5%9C%A8%E5%93%AA%E9%87%8Cunreal-gameplay%E6%A1%86%E6%9E%B6%E7%AE%80%E8%A6%81/"},{"categories":["Unreal"],"content":"GameMode和GameState GameMode实际上是定义的世界（World）的规则，可以理解成WorldMode，它来控制UWorld “上帝的意志” GameState则表示世界的状态 一个问题：如果有关于世界的规则越来越多，那么GameMode中的逻辑也会变得很庞大，该如何处理这种情况？ 见Subsystem ","date":"2022-11-05","objectID":"/posts/%E4%B8%B4%E9%98%B5%E7%A3%A8%E6%9E%AA%E5%93%AA%E4%BA%9B%E9%80%BB%E8%BE%91%E5%86%99%E5%9C%A8%E5%93%AA%E9%87%8Cunreal-gameplay%E6%A1%86%E6%9E%B6%E7%AE%80%E8%A6%81/:6:0","tags":["临阵磨枪","Gameplay","Unreal","笔记"],"title":"【临阵磨枪】哪些逻辑写在哪里——Unreal Gameplay框架简要","uri":"/posts/%E4%B8%B4%E9%98%B5%E7%A3%A8%E6%9E%AA%E5%93%AA%E4%BA%9B%E9%80%BB%E8%BE%91%E5%86%99%E5%9C%A8%E5%93%AA%E9%87%8Cunreal-gameplay%E6%A1%86%E6%9E%B6%E7%AE%80%E8%A6%81/"},{"categories":["Unreal"],"content":"GameInstance和SaveGame GameInstance是正常游戏的全局示例 World的外围管理对象 所以会写一些跨关卡的逻辑 比如，存档，由于存档实在是太重要了，所以Unreal专门写了一个USaveGame类给开发者使用 SaveGame就是GameInstance层级的一个数据对象，当然，根据我的理解，GameInstance里也可以存放一些数据，这些数据是不需要进行序列化保存到本地，只需要在游戏运行期间使用就行的（当然要符合GameInstance这个层级），而需要保存到本地的则放在SaveGame里。 ","date":"2022-11-05","objectID":"/posts/%E4%B8%B4%E9%98%B5%E7%A3%A8%E6%9E%AA%E5%93%AA%E4%BA%9B%E9%80%BB%E8%BE%91%E5%86%99%E5%9C%A8%E5%93%AA%E9%87%8Cunreal-gameplay%E6%A1%86%E6%9E%B6%E7%AE%80%E8%A6%81/:7:0","tags":["临阵磨枪","Gameplay","Unreal","笔记"],"title":"【临阵磨枪】哪些逻辑写在哪里——Unreal Gameplay框架简要","uri":"/posts/%E4%B8%B4%E9%98%B5%E7%A3%A8%E6%9E%AA%E5%93%AA%E4%BA%9B%E9%80%BB%E8%BE%91%E5%86%99%E5%9C%A8%E5%93%AA%E9%87%8Cunreal-gameplay%E6%A1%86%E6%9E%B6%E7%AE%80%E8%A6%81/"},{"categories":["Unreal"],"content":"USubsystem 业务逻辑的组件 5个生命周期粒度控制 自动生成对象 托管生命周期 替代Manager类 详见InsideUE ","date":"2022-11-05","objectID":"/posts/%E4%B8%B4%E9%98%B5%E7%A3%A8%E6%9E%AA%E5%93%AA%E4%BA%9B%E9%80%BB%E8%BE%91%E5%86%99%E5%9C%A8%E5%93%AA%E9%87%8Cunreal-gameplay%E6%A1%86%E6%9E%B6%E7%AE%80%E8%A6%81/:8:0","tags":["临阵磨枪","Gameplay","Unreal","笔记"],"title":"【临阵磨枪】哪些逻辑写在哪里——Unreal Gameplay框架简要","uri":"/posts/%E4%B8%B4%E9%98%B5%E7%A3%A8%E6%9E%AA%E5%93%AA%E4%BA%9B%E9%80%BB%E8%BE%91%E5%86%99%E5%9C%A8%E5%93%AA%E9%87%8Cunreal-gameplay%E6%A1%86%E6%9E%B6%E7%AE%80%E8%A6%81/"},{"categories":["Unreal"],"content":"UI 创建UI，比较推荐写在PlayerController里，不要写在GameMode或者关卡蓝图里 这个是涉及一个联机问题，因为GameMode是不会在客户端里的，理论上单机游戏创建UI写在哪里都行，但是一旦联机还是写在本地会有的关联性也比较强的PlayerController里为好 或者，考虑Subsystem ","date":"2022-11-05","objectID":"/posts/%E4%B8%B4%E9%98%B5%E7%A3%A8%E6%9E%AA%E5%93%AA%E4%BA%9B%E9%80%BB%E8%BE%91%E5%86%99%E5%9C%A8%E5%93%AA%E9%87%8Cunreal-gameplay%E6%A1%86%E6%9E%B6%E7%AE%80%E8%A6%81/:9:0","tags":["临阵磨枪","Gameplay","Unreal","笔记"],"title":"【临阵磨枪】哪些逻辑写在哪里——Unreal Gameplay框架简要","uri":"/posts/%E4%B8%B4%E9%98%B5%E7%A3%A8%E6%9E%AA%E5%93%AA%E4%BA%9B%E9%80%BB%E8%BE%91%E5%86%99%E5%9C%A8%E5%93%AA%E9%87%8Cunreal-gameplay%E6%A1%86%E6%9E%B6%E7%AE%80%E8%A6%81/"},{"categories":["Unreal"],"content":"总结：什么逻辑在那里 Component：功能、能力 Actor：个体本身的逻辑 Apawn、APlayerController、APlayerState：主角肉体、灵魂、状态 APawn、AAIController、APlayerState：AI肉体、灵魂、状态 AAIController、BehaviorTree：AI灵魂、行为树、数据 AGameMode、AGameState：游戏规则、游戏状态 UGameInstance、USaveGame：全局游戏实例、游戏存档 USubsystem：游戏逻辑组件 ","date":"2022-11-05","objectID":"/posts/%E4%B8%B4%E9%98%B5%E7%A3%A8%E6%9E%AA%E5%93%AA%E4%BA%9B%E9%80%BB%E8%BE%91%E5%86%99%E5%9C%A8%E5%93%AA%E9%87%8Cunreal-gameplay%E6%A1%86%E6%9E%B6%E7%AE%80%E8%A6%81/:10:0","tags":["临阵磨枪","Gameplay","Unreal","笔记"],"title":"【临阵磨枪】哪些逻辑写在哪里——Unreal Gameplay框架简要","uri":"/posts/%E4%B8%B4%E9%98%B5%E7%A3%A8%E6%9E%AA%E5%93%AA%E4%BA%9B%E9%80%BB%E8%BE%91%E5%86%99%E5%9C%A8%E5%93%AA%E9%87%8Cunreal-gameplay%E6%A1%86%E6%9E%B6%E7%AE%80%E8%A6%81/"},{"categories":["Unreal"],"content":"输入事件在那里处理 考虑联机扩展 APlayerController最优先 APawn其次 单独Actor且EnableInput 关卡蓝图：Demo测试 ","date":"2022-11-05","objectID":"/posts/%E4%B8%B4%E9%98%B5%E7%A3%A8%E6%9E%AA%E5%93%AA%E4%BA%9B%E9%80%BB%E8%BE%91%E5%86%99%E5%9C%A8%E5%93%AA%E9%87%8Cunreal-gameplay%E6%A1%86%E6%9E%B6%E7%AE%80%E8%A6%81/:10:1","tags":["临阵磨枪","Gameplay","Unreal","笔记"],"title":"【临阵磨枪】哪些逻辑写在哪里——Unreal Gameplay框架简要","uri":"/posts/%E4%B8%B4%E9%98%B5%E7%A3%A8%E6%9E%AA%E5%93%AA%E4%BA%9B%E9%80%BB%E8%BE%91%E5%86%99%E5%9C%A8%E5%93%AA%E9%87%8Cunreal-gameplay%E6%A1%86%E6%9E%B6%E7%AE%80%E8%A6%81/"},{"categories":["Dev"],"content":"最基础的：斜体、加粗、粗斜体、Inline代码、删除线 ToDo Done ","date":"2022-10-29","objectID":"/posts/first/:0:0","tags":["格式"],"title":"内容格式参考模板","uri":"/posts/first/"},{"categories":["Dev"],"content":"一级标题 ","date":"2022-10-29","objectID":"/posts/first/:1:0","tags":["格式"],"title":"内容格式参考模板","uri":"/posts/first/"},{"categories":["Dev"],"content":"二级标题 三级标题 四级标题 引 用 简单代码块 有 序 列 表 无 序 列 表 嵌 套 列 表 公式： 在markdown中使用KaTeX公式，遇到 _ * \u003e\u003e \\( \\) \\{ \\} \\] \\[ 在前面都需要添加转义符 \\ 比较保险。 对于 \\\\ ，需要写成 \\\\\\\\ 公式块： $$ C(n,m)=\\frac{n*(n-1)*…*(n-m+1)}{m*(m-1)*…*1} $$ $$P(A|B)=\\cfrac{P(A)*P(B|A)}{P(B)}$$ 行内公式1： \\(f(x)=\\int_{-\\infty}^{\\infty} \\hat{f}(\\xi) e^{2 \\pi i \\xi x} d \\xi\\) 行内公式2： \\(\\mathbf{E}=\\sum_{i} \\mathbf{E}_{i}=\\mathbf{E}_{1}+\\mathbf{E}_{2}+\\mathbf{E}_{3}+\\cdots\\) 矩阵：$$\\begin{matrix} 1\u00262 \\\\ 3\u00264 \\\\ 5\u00266 \\end{matrix} $$ $$\\left\\{ \\begin{matrix} 1\u00262 \\\\ 3\u00264 \\\\ 5\u00266 \\end{matrix} \\right\\} $$ $$\\left[ \\begin{matrix} 1\u00262 \\\\ 3\u00264 \\\\ 5\u00266 \\end{matrix} \\right] $$ 快速分数： 99/100 额外空行： 表格： 左对齐 右对齐 居中对齐 单元格 单元格 单元格 单元格 单元格 单元格 脚注： 使用1表示脚注 链接： 这是一个连接 加强代码块： #include \u003ciostream\u003e int main() { std::cout\u003c\u003c(\"Hello world!\"); return 0; } Admonition shortcode： tip\rA tip banner\rnote\rA note banner\rinfo\rA info banner\rSuccess\rA success banner\rabstract\rA abstract banner\rquestion\rA question banner\rwarning\rA warning banner\rfailure\rA failure banner\rdanger\rA danger banner\rbug\rA bug banner\rexample\rA example banner\rquote\rA quote banner\r添加B站视频（Youtube同理）： 添加本地音乐： 添加平台音乐（第二个参数song或者playlist或者album或者artist都行）： 添加平台音乐2： 添加脚本： 图片： 带脚注图片： 这样会自动放缩并居中\r行内图片，自定义大小： 图片居中，自定义大小，带脚注： 这是一个脚注 ↩︎ ","date":"2022-10-29","objectID":"/posts/first/:1:1","tags":["格式"],"title":"内容格式参考模板","uri":"/posts/first/"},{"categories":["Unreal","Game","GameDesign","GameDev","GameReview","PersonalWork","Dev","MeMe","Ramble","Other"],"content":" ","date":"2022-10-29","objectID":"/quickpost/:0:0","tags":null,"title":"查询精神状态","uri":"/quickpost/"}]